# Generated by Django 5.1.4 on 2025-02-05 15:36

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CurrentAffairsMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE_STATEMENT', 'SINGLE_STATEMENT'), ('TWO_STATEMENTS', 'TWO_STATEMENTS'), ('THREE_STATEMENTS', 'THREE_STATEMENTS'), ('IDENTIFY_FEATURES', 'IDENTIFY_FEATURES'), ('MATCH_THE_PAIRS', 'MATCH_THE_PAIRS')], max_length=20)),
                ('option_a', models.TextField()),
                ('option_b', models.TextField()),
                ('option_c', models.TextField()),
                ('option_d', models.TextField()),
                ('explanation', models.TextField()),
                ('subject', models.CharField(choices=[('MIH', 'MODERN_INDIAN_HISTORY'), ('HAC', 'HISTORY_ART_AND_CULTURE'), ('POL', 'POLITY'), ('IRS', 'INTERNATIONAL_RELATIONS_AND_SECURITY'), ('ECO', 'ECONOMICS'), ('SNT', 'SCIENCE_AND_TECH'), ('ENV', 'ENVIRONMENT'), ('GEO', 'GEOGRAPHY'), ('SOCI', 'SOCIAL_ISSUES'), ('MISC', 'MISCELLANEOUS')], max_length=4)),
            ],
            options={
                'db_table': 'prelims_mock_mcq_current_affairs',
            },
        ),
        migrations.CreateModel(
            name='EconomicsMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE_STATEMENT', 'SINGLE_STATEMENT'), ('TWO_STATEMENTS', 'TWO_STATEMENTS'), ('THREE_STATEMENTS', 'THREE_STATEMENTS'), ('IDENTIFY_FEATURES', 'IDENTIFY_FEATURES'), ('MATCH_THE_PAIRS', 'MATCH_THE_PAIRS')], max_length=20)),
                ('option_a', models.TextField()),
                ('option_b', models.TextField()),
                ('option_c', models.TextField()),
                ('option_d', models.TextField()),
                ('explanation', models.TextField()),
            ],
            options={
                'db_table': 'prelims_mock_mcq_economics',
            },
        ),
        migrations.CreateModel(
            name='EnvironmentMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE_STATEMENT', 'SINGLE_STATEMENT'), ('TWO_STATEMENTS', 'TWO_STATEMENTS'), ('THREE_STATEMENTS', 'THREE_STATEMENTS'), ('IDENTIFY_FEATURES', 'IDENTIFY_FEATURES'), ('MATCH_THE_PAIRS', 'MATCH_THE_PAIRS')], max_length=20)),
                ('option_a', models.TextField()),
                ('option_b', models.TextField()),
                ('option_c', models.TextField()),
                ('option_d', models.TextField()),
                ('explanation', models.TextField()),
            ],
            options={
                'db_table': 'prelims_mock_mcqs_environment',
            },
        ),
        migrations.CreateModel(
            name='GeographyMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE_STATEMENT', 'SINGLE_STATEMENT'), ('TWO_STATEMENTS', 'TWO_STATEMENTS'), ('THREE_STATEMENTS', 'THREE_STATEMENTS'), ('IDENTIFY_FEATURES', 'IDENTIFY_FEATURES'), ('MATCH_THE_PAIRS', 'MATCH_THE_PAIRS')], max_length=20)),
                ('option_a', models.TextField()),
                ('option_b', models.TextField()),
                ('option_c', models.TextField()),
                ('option_d', models.TextField()),
                ('explanation', models.TextField()),
            ],
            options={
                'db_table': 'prelims_mock_mcq_geography',
            },
        ),
        migrations.CreateModel(
            name='HistoryArtAndCultureMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE_STATEMENT', 'SINGLE_STATEMENT'), ('TWO_STATEMENTS', 'TWO_STATEMENTS'), ('THREE_STATEMENTS', 'THREE_STATEMENTS'), ('IDENTIFY_FEATURES', 'IDENTIFY_FEATURES'), ('MATCH_THE_PAIRS', 'MATCH_THE_PAIRS')], max_length=20)),
                ('option_a', models.TextField()),
                ('option_b', models.TextField()),
                ('option_c', models.TextField()),
                ('option_d', models.TextField()),
                ('explanation', models.TextField()),
            ],
            options={
                'db_table': 'prelims_mock_mcq_history_art_and_culture',
            },
        ),
        migrations.CreateModel(
            name='ModernIndianHistoryMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE_STATEMENT', 'SINGLE_STATEMENT'), ('TWO_STATEMENTS', 'TWO_STATEMENTS'), ('THREE_STATEMENTS', 'THREE_STATEMENTS'), ('IDENTIFY_FEATURES', 'IDENTIFY_FEATURES'), ('MATCH_THE_PAIRS', 'MATCH_THE_PAIRS')], max_length=20)),
                ('option_a', models.TextField()),
                ('option_b', models.TextField()),
                ('option_c', models.TextField()),
                ('option_d', models.TextField()),
                ('explanation', models.TextField()),
            ],
            options={
                'db_table': 'prelims_mock_mcq_history',
            },
        ),
        migrations.CreateModel(
            name='PolityMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE_STATEMENT', 'SINGLE_STATEMENT'), ('TWO_STATEMENTS', 'TWO_STATEMENTS'), ('THREE_STATEMENTS', 'THREE_STATEMENTS'), ('IDENTIFY_FEATURES', 'IDENTIFY_FEATURES'), ('MATCH_THE_PAIRS', 'MATCH_THE_PAIRS')], max_length=20)),
                ('option_a', models.TextField()),
                ('option_b', models.TextField()),
                ('option_c', models.TextField()),
                ('option_d', models.TextField()),
                ('explanation', models.TextField()),
            ],
            options={
                'db_table': 'prelims_mock_mcq_polity',
            },
        ),
        migrations.CreateModel(
            name='ScienceAndTechMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE_STATEMENT', 'SINGLE_STATEMENT'), ('TWO_STATEMENTS', 'TWO_STATEMENTS'), ('THREE_STATEMENTS', 'THREE_STATEMENTS'), ('IDENTIFY_FEATURES', 'IDENTIFY_FEATURES'), ('MATCH_THE_PAIRS', 'MATCH_THE_PAIRS')], max_length=20)),
                ('option_a', models.TextField()),
                ('option_b', models.TextField()),
                ('option_c', models.TextField()),
                ('option_d', models.TextField()),
                ('explanation', models.TextField()),
            ],
            options={
                'db_table': 'prelims_mock_mcq_science_and_tech',
            },
        ),
        migrations.CreateModel(
            name='PYQuestions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField()),
                ('q_num', models.PositiveIntegerField()),
                ('subject', models.CharField(choices=[('MIH', 'MODERN_INDIAN_HISTORY'), ('HAC', 'HISTORY_ART_AND_CULTURE'), ('POL', 'POLITY'), ('IRS', 'INTERNATIONAL_RELATIONS_AND_SECURITY'), ('ECO', 'ECONOMICS'), ('SNT', 'SCIENCE_AND_TECH'), ('ENV', 'ENVIRONMENT'), ('GEO', 'GEOGRAPHY'), ('SOCI', 'SOCIAL_ISSUES'), ('MISC', 'MISCELLANEOUS')], max_length=4)),
                ('question_text', models.TextField()),
                ('option_a', models.TextField()),
                ('option_b', models.TextField()),
                ('option_c', models.TextField()),
                ('option_d', models.TextField()),
                ('correct_option', models.CharField(choices=[('a', 'a'), ('b', 'b'), ('c', 'c'), ('d', 'd')], max_length=1)),
                ('explanation', models.TextField()),
            ],
            options={
                'db_table': 'prelims_pyqs',
                'ordering': ['year', 'q_num'],
                'unique_together': {('year', 'q_num')},
            },
        ),
    ]
