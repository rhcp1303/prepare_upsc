# Generated by Django 5.1.4 on 2025-01-19 09:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='MockMCQExplanations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('explanation_text', models.TextField()),
            ],
            options={
                'db_table': 'prelims_mock_mcq_answer_explanations',
            },
        ),
        migrations.CreateModel(
            name='PYQExplanations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('explanation_text', models.TextField()),
            ],
            options={
                'db_table': 'prelims_pyq_explanations',
            },
        ),
        migrations.CreateModel(
            name='HistoryMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE', 'SINGLE_STATEMENT'), ('TWO_CORR', 'TWO_STATEMENT_CORRECT_OPTIONS'), ('ASSERTION', 'TWO_STATEMENTS_ASSERTION_REASONING'), ('MULTI_STMT', 'MULTIPLE_STATEMENTS'), ('MULTI_ELIM', 'MULTIPLE_OPTIONS_SELECT_CORRECT_ELIMINATION'), ('MULTI_NUM', 'MULTIPLE_OPTIONS_SELECT_NUMBER_STYLE'), ('MATCH_CODE', 'MATCH_THE_PAIRS_CODE_STYLE'), ('MATCH_NUM', 'MATCH_THE_PAIRS_NUMBER_STYLE'), ('MULTI_DESC', 'MULTIPLE_DESCRIPTIONS_IDENTIFY_SUBJECT')], max_length=15)),
                ('difficulty_level', models.CharField(choices=[('easy', 'EASY'), ('moderate', 'MODERATE'), ('difficult', 'DIFFICULT')], max_length=10)),
                ('explanation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='questions.mockmcqexplanations')),
            ],
            options={
                'db_table': 'prelims_mock_mcq_history',
            },
        ),
        migrations.CreateModel(
            name='HistoryArtAndCultureMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE', 'SINGLE_STATEMENT'), ('TWO_CORR', 'TWO_STATEMENT_CORRECT_OPTIONS'), ('ASSERTION', 'TWO_STATEMENTS_ASSERTION_REASONING'), ('MULTI_STMT', 'MULTIPLE_STATEMENTS'), ('MULTI_ELIM', 'MULTIPLE_OPTIONS_SELECT_CORRECT_ELIMINATION'), ('MULTI_NUM', 'MULTIPLE_OPTIONS_SELECT_NUMBER_STYLE'), ('MATCH_CODE', 'MATCH_THE_PAIRS_CODE_STYLE'), ('MATCH_NUM', 'MATCH_THE_PAIRS_NUMBER_STYLE'), ('MULTI_DESC', 'MULTIPLE_DESCRIPTIONS_IDENTIFY_SUBJECT')], max_length=15)),
                ('difficulty_level', models.CharField(choices=[('easy', 'EASY'), ('moderate', 'MODERATE'), ('difficult', 'DIFFICULT')], max_length=10)),
                ('explanation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='questions.mockmcqexplanations')),
            ],
            options={
                'db_table': 'prelims_mock_mcq_history_art_and_culture',
            },
        ),
        migrations.CreateModel(
            name='GeographyMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE', 'SINGLE_STATEMENT'), ('TWO_CORR', 'TWO_STATEMENT_CORRECT_OPTIONS'), ('ASSERTION', 'TWO_STATEMENTS_ASSERTION_REASONING'), ('MULTI_STMT', 'MULTIPLE_STATEMENTS'), ('MULTI_ELIM', 'MULTIPLE_OPTIONS_SELECT_CORRECT_ELIMINATION'), ('MULTI_NUM', 'MULTIPLE_OPTIONS_SELECT_NUMBER_STYLE'), ('MATCH_CODE', 'MATCH_THE_PAIRS_CODE_STYLE'), ('MATCH_NUM', 'MATCH_THE_PAIRS_NUMBER_STYLE'), ('MULTI_DESC', 'MULTIPLE_DESCRIPTIONS_IDENTIFY_SUBJECT')], max_length=15)),
                ('difficulty_level', models.CharField(choices=[('easy', 'EASY'), ('moderate', 'MODERATE'), ('difficult', 'DIFFICULT')], max_length=10)),
                ('explanation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='questions.mockmcqexplanations')),
            ],
            options={
                'db_table': 'prelims_mock_mcq_geography',
            },
        ),
        migrations.CreateModel(
            name='EnvironmentMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE', 'SINGLE_STATEMENT'), ('TWO_CORR', 'TWO_STATEMENT_CORRECT_OPTIONS'), ('ASSERTION', 'TWO_STATEMENTS_ASSERTION_REASONING'), ('MULTI_STMT', 'MULTIPLE_STATEMENTS'), ('MULTI_ELIM', 'MULTIPLE_OPTIONS_SELECT_CORRECT_ELIMINATION'), ('MULTI_NUM', 'MULTIPLE_OPTIONS_SELECT_NUMBER_STYLE'), ('MATCH_CODE', 'MATCH_THE_PAIRS_CODE_STYLE'), ('MATCH_NUM', 'MATCH_THE_PAIRS_NUMBER_STYLE'), ('MULTI_DESC', 'MULTIPLE_DESCRIPTIONS_IDENTIFY_SUBJECT')], max_length=15)),
                ('difficulty_level', models.CharField(choices=[('easy', 'EASY'), ('moderate', 'MODERATE'), ('difficult', 'DIFFICULT')], max_length=10)),
                ('explanation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='questions.mockmcqexplanations')),
            ],
            options={
                'db_table': 'prelims_mock_mcq_environment',
            },
        ),
        migrations.CreateModel(
            name='EconomicsMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE', 'SINGLE_STATEMENT'), ('TWO_CORR', 'TWO_STATEMENT_CORRECT_OPTIONS'), ('ASSERTION', 'TWO_STATEMENTS_ASSERTION_REASONING'), ('MULTI_STMT', 'MULTIPLE_STATEMENTS'), ('MULTI_ELIM', 'MULTIPLE_OPTIONS_SELECT_CORRECT_ELIMINATION'), ('MULTI_NUM', 'MULTIPLE_OPTIONS_SELECT_NUMBER_STYLE'), ('MATCH_CODE', 'MATCH_THE_PAIRS_CODE_STYLE'), ('MATCH_NUM', 'MATCH_THE_PAIRS_NUMBER_STYLE'), ('MULTI_DESC', 'MULTIPLE_DESCRIPTIONS_IDENTIFY_SUBJECT')], max_length=15)),
                ('difficulty_level', models.CharField(choices=[('easy', 'EASY'), ('moderate', 'MODERATE'), ('difficult', 'DIFFICULT')], max_length=10)),
                ('explanation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='questions.mockmcqexplanations')),
            ],
            options={
                'db_table': 'prelims_mock_economics',
            },
        ),
        migrations.CreateModel(
            name='CurrentAffairsMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE', 'SINGLE_STATEMENT'), ('TWO_CORR', 'TWO_STATEMENT_CORRECT_OPTIONS'), ('ASSERTION', 'TWO_STATEMENTS_ASSERTION_REASONING'), ('MULTI_STMT', 'MULTIPLE_STATEMENTS'), ('MULTI_ELIM', 'MULTIPLE_OPTIONS_SELECT_CORRECT_ELIMINATION'), ('MULTI_NUM', 'MULTIPLE_OPTIONS_SELECT_NUMBER_STYLE'), ('MATCH_CODE', 'MATCH_THE_PAIRS_CODE_STYLE'), ('MATCH_NUM', 'MATCH_THE_PAIRS_NUMBER_STYLE'), ('MULTI_DESC', 'MULTIPLE_DESCRIPTIONS_IDENTIFY_SUBJECT')], max_length=15)),
                ('difficulty_level', models.CharField(choices=[('easy', 'EASY'), ('moderate', 'MODERATE'), ('difficult', 'DIFFICULT')], max_length=10)),
                ('subject', models.CharField(choices=[('MIH', 'MODERN_INDIAN_HISTORY'), ('HAC', 'HISTORY_ART_AND_CULTURE'), ('POL', 'POLITY'), ('IR', 'INTERNATIONAL_RELATIONS'), ('SEC', 'SECURITY'), ('ECO', 'ECONOMICS'), ('ST', 'SCIENCE_AND_TECH'), ('ENV', 'ENVIRONMENT'), ('GEO', 'GEOGRAPHY'), ('MISC', 'MISCELLANEOUS')], max_length=4)),
                ('explanation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='questions.mockmcqexplanations')),
            ],
            options={
                'db_table': 'prelims_mock_mcq_current_affairs',
            },
        ),
        migrations.CreateModel(
            name='MockMCQOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('option_num', models.PositiveIntegerField()),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PolityMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE', 'SINGLE_STATEMENT'), ('TWO_CORR', 'TWO_STATEMENT_CORRECT_OPTIONS'), ('ASSERTION', 'TWO_STATEMENTS_ASSERTION_REASONING'), ('MULTI_STMT', 'MULTIPLE_STATEMENTS'), ('MULTI_ELIM', 'MULTIPLE_OPTIONS_SELECT_CORRECT_ELIMINATION'), ('MULTI_NUM', 'MULTIPLE_OPTIONS_SELECT_NUMBER_STYLE'), ('MATCH_CODE', 'MATCH_THE_PAIRS_CODE_STYLE'), ('MATCH_NUM', 'MATCH_THE_PAIRS_NUMBER_STYLE'), ('MULTI_DESC', 'MULTIPLE_DESCRIPTIONS_IDENTIFY_SUBJECT')], max_length=15)),
                ('difficulty_level', models.CharField(choices=[('easy', 'EASY'), ('moderate', 'MODERATE'), ('difficult', 'DIFFICULT')], max_length=10)),
                ('explanation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='questions.mockmcqexplanations')),
            ],
            options={
                'db_table': 'prelims_mock_mcq_polity',
            },
        ),
        migrations.CreateModel(
            name='PYQuestions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(choices=[('MIH', 'MODERN_INDIAN_HISTORY'), ('HAC', 'HISTORY_ART_AND_CULTURE'), ('POL', 'POLITY'), ('IR', 'INTERNATIONAL_RELATIONS'), ('SEC', 'SECURITY'), ('ECO', 'ECONOMICS'), ('ST', 'SCIENCE_AND_TECH'), ('ENV', 'ENVIRONMENT'), ('GEO', 'GEOGRAPHY'), ('MISC', 'MISCELLANEOUS')], max_length=4)),
                ('question_text', models.TextField()),
                ('year', models.PositiveIntegerField()),
                ('q_num', models.PositiveIntegerField()),
                ('explanation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='question', to='questions.pyqexplanations')),
            ],
            options={
                'db_table': 'prelims_pyqs',
                'ordering': ['year', 'q_num'],
                'unique_together': {('year', 'q_num')},
            },
        ),
        migrations.CreateModel(
            name='ScienceAndTechMockMCQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('pattern_type', models.CharField(choices=[('SINGLE', 'SINGLE_STATEMENT'), ('TWO_CORR', 'TWO_STATEMENT_CORRECT_OPTIONS'), ('ASSERTION', 'TWO_STATEMENTS_ASSERTION_REASONING'), ('MULTI_STMT', 'MULTIPLE_STATEMENTS'), ('MULTI_ELIM', 'MULTIPLE_OPTIONS_SELECT_CORRECT_ELIMINATION'), ('MULTI_NUM', 'MULTIPLE_OPTIONS_SELECT_NUMBER_STYLE'), ('MATCH_CODE', 'MATCH_THE_PAIRS_CODE_STYLE'), ('MATCH_NUM', 'MATCH_THE_PAIRS_NUMBER_STYLE'), ('MULTI_DESC', 'MULTIPLE_DESCRIPTIONS_IDENTIFY_SUBJECT')], max_length=15)),
                ('difficulty_level', models.CharField(choices=[('easy', 'EASY'), ('moderate', 'MODERATE'), ('difficult', 'DIFFICULT')], max_length=10)),
                ('explanation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='questions.mockmcqexplanations')),
            ],
            options={
                'db_table': 'prelims_mock_mcq_science_and_tech',
            },
        ),
        migrations.CreateModel(
            name='PYQOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('option_num', models.PositiveIntegerField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='questions.pyquestions')),
            ],
            options={
                'db_table': 'prelims_pyq_options',
                'ordering': ['option_num'],
                'unique_together': {('question', 'option_num')},
            },
        ),
    ]
